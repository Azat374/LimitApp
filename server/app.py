from flask import Flask, jsonify, request
from flask_cors import CORS
import sympy as sp
import logging

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.INFO)

# –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á
tasks = [
    {
        "id": "8.1",
        "title": "8.1. lim ((2x + 3)/(5x+7))^(x+1)",
        "expression": "((2*x + 3)/(5*x+7))^(x+1)",
        "limitVar": "x->‚àû",
        "expected_limit": "0"
    },
    {
        "id": "8.2",
        "title": "8.2. lim ((2x + 1)/(x-1))^3x",
        "expression": "((2*x + 1)/(2*x-1))^(3*x)",
        "limitVar": "x->‚àû",
        "expected_limit": "0"
    },
    {
        "id": "8.3",
        "title": "8.3. lim (2x + 1)/(x-1)",
        "expression": "(2*x + 1)/(x - 1)",
        "limitVar": "x->‚àû",
        "expected_limit": "2"
    }
]

# –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏–π
def safe_sympify(expr):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ sympy-—Ñ–æ—Ä–º–∞—Ç."""
    try:
        expr = expr.replace(r"e^{", "exp(").replace(r"\ln", "log")
        return sp.sympify(expr)
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è '{expr}': {e}")

@app.route("/api/problems", methods=["GET"])
def get_tasks():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á."""
    return jsonify({"tasks": tasks}), 200

@app.route("/api/check_solution", methods=["POST"])
def check_solution():
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏. """
    data = request.json
    logging.info("üì° –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: %s", data)

    if not data or "taskId" not in data or "steps" not in data:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"}), 400

    task_id = data["taskId"]
    steps = data["steps"]

    if not isinstance(steps, list) or any(not isinstance(s, str) for s in steps):
        return jsonify({"error": "steps –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å—Ç—Ä–æ–∫"}), 400

    task = next((t for t in tasks if t["id"] == task_id), None)
    if not task:
        return jsonify({"error": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404

    x = sp.Symbol('x')
    errors = []

    algebraic_steps = []
    found_limit = False

    for step in steps:
        if step == "LIMIT":
            found_limit = True
            break
        algebraic_steps.append(step)

    if not algebraic_steps:
        return jsonify({
            "success": False,
            "errors": [{"step": 1, "error": "–ù–µ—Ç –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏—Ö —à–∞–≥–æ–≤", "hint": "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥"}]
        }), 200

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤ (—É—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã–µ —Ñ–æ—Ä–º—ã)
    for i in range(len(algebraic_steps) - 1):
        prev_expr = algebraic_steps[i]
        curr_expr = algebraic_steps[i + 1]

        try:
            prev_sym = sp.simplify(safe_sympify(prev_expr))
            curr_sym = sp.simplify(safe_sympify(curr_expr))

            if not prev_sym.equals(curr_sym):
                errors.append({
                    "step": i + 1,
                    "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
                    "expected": str(prev_sym),
                    "received": str(curr_sym),
                    "hint": f"–î–æ–ø—É—Å—Ç–∏–º—ã–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã–µ —Ñ–æ—Ä–º—ã: {prev_sym}"
                })
        except Exception as e:
            errors.append({
                "step": i + 1,
                "error": "–û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏",
                "details": str(e),
                "hint": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏"
            })

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–µ–ª
    if found_limit:
        try:
            last_expr = safe_sympify(algebraic_steps[-1])
            computed_limit = sp.limit(last_expr, x, sp.oo)
            expected_limit = safe_sympify(task["expected_limit"])

            logging.info(f"‚úÖ –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–µ–ª: {computed_limit}")

            if not sp.simplify(computed_limit - expected_limit).is_zero:
                errors.append({
                    "step": len(steps),
                    "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ–¥–µ–ª",
                    "expected": str(expected_limit),
                    "received": str(computed_limit),
                    "hint": f"–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected_limit}"
                })

            # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–µ–ª–æ–º
            if steps[-1] != "LIMIT" and errors == []:
                student_result = safe_sympify(steps[-1])
                if not sp.simplify(student_result - computed_limit).is_zero:
                    errors.append({
                        "step": len(steps),
                        "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
                        "expected": str(computed_limit),
                        "received": str(student_result),
                        "hint": f"–ü–æ—Å–ª–µ 'LIMIT' —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: {computed_limit}"
                    })

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–µ–¥–µ–ª–∞: {str(e)}")
            errors.append({
                "step": len(steps),
                "error": "–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞",
                "details": str(e),
                "hint": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ LIMIT"
            })

    if errors:
        logging.info("‚ùå –û—à–∏–±–∫–∏ –≤ —Ä–µ—à–µ–Ω–∏–∏: %s", errors)
        return jsonify({"success": False, "errors": errors}), 200

    return jsonify({
        "success": True,
        "message": f"‚úÖ –†–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ, –ø—Ä–µ–¥–µ–ª = {computed_limit}"
    }), 200

if __name__ == "__main__":
    app.run(debug=True)
