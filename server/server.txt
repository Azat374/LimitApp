==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\.env.example ====
#SQLALCHEMY_DATABASE_URI=sqlite:///database/math_checker.db
DB_DB_SECRET_KEY=23e629b053aeda6ff423b58a99f861cecd1670e05af7bb9ea55757f419e2a0dcdab40e36e772fbf55ef0ba5533527e4360ad2c25b740336049a9d30667ca126c
DATABASE_PATH = os.path.join(BASE_DIR, "database", "math_checker.db")
SQLALCHEMY_DATABASE_URI = "sqlite:///" + DATABASE_PATH



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\ai_check.py ====



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\app.py ====
from flask import Flask
from flask_cors import CORS
from config import Config
from models import db
from utils.Auth.auth import auth_bp
from tasks import tasks_bp
from solutions import solutions_bp
from reports import reports_bp
from profile import profile_bp
from solution_integral import solution_integral_bp
from tasks_generator import tasks_generator_bp
from users import users_bp
app = Flask(__name__)
app.config.from_object(Config)
CORS(app)

db.init_app(app)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Blueprints
app.register_blueprint(auth_bp)
app.register_blueprint(tasks_bp)
app.register_blueprint(solutions_bp)
app.register_blueprint(reports_bp)
app.register_blueprint(profile_bp)
app.register_blueprint(solution_integral_bp)
app.register_blueprint(tasks_generator_bp)
app.register_blueprint(users_bp)
# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
with app.app_context():
    db.create_all()

if __name__ == "__main__":
    app.run(debug=True)



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\checker.py ====
import sympy as sp

def safe_sympify(expr):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ sympy-—Ñ–æ—Ä–º–∞—Ç."""
    try:
        if expr == "LIMIT":
            # –ï—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç LIMIT, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ-—Ç–æ
            # –ù–æ –ª—É—á—à–µ –≤–æ–æ–±—â–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –µ–≥–æ –∫–∞–∫ expr :)
            return sp.Integer(0)  # –∑–∞–≥–ª—É—à–∫–∞
        expr = expr.replace("e^{", "exp(").replace(r"\ln", "log")
        return sp.sympify(expr)
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è '{expr}': {e}")

def check_algebraic_step(prev_expr_str, curr_expr_str, tolerance=1e-6):
    try:
        # –ï—Å–ª–∏ –≤ prev_expr_str = "LIMIT", –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        if prev_expr_str == "LIMIT":
            return {"is_correct": True, "error_type": None, "hint": "LIMIT –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω."}

        prev_expr = sp.simplify(safe_sympify(prev_expr_str))
        curr_expr = sp.simplify(safe_sympify(curr_expr_str))
        if prev_expr.equals(curr_expr):
            return {"is_correct": True, "error_type": None, "hint": ""}
        # –î–æ–ø.—á–∏—Å–ª–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        for val in [1, 2, 3]:
            if abs(prev_expr.subs({'x': val}) - curr_expr.subs({'x': val})) > tolerance:
                return {
                    "is_correct": False,
                    "error_type": "algebraic_error",
                    "hint": "–û—à–∏–±–∫–∞ –≤ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–Ω–µ—Å–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è."
                }
        return {"is_correct": True, "error_type": None, "hint": ""}
    except Exception as e:
        return {"is_correct": False, "error_type": "parse_error", "hint": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}"}

def check_limit(last_expr_str, expected_value_str):
    try:
        x = sp.Symbol('x')
        last_expr = safe_sympify(last_expr_str)
        computed_limit = sp.limit(last_expr, x, sp.oo)
        expected_value = safe_sympify(expected_value_str)
        if sp.simplify(computed_limit - expected_value) == 0:
            return {"is_correct": True, "computed_limit": computed_limit, "error_type": None, "hint": ""}
        else:
            return {
                "is_correct": False,
                "computed_limit": computed_limit,
                "error_type": "limit_error",
                "hint": f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–µ–¥–µ–ª: {expected_value}"
            }
    except Exception as e:
        return {
            "is_correct": False,
            "error_type": "limit_parse_error",
            "hint": f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–µ–¥–µ–ª–∞: {str(e)}"
        }



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\config.py ====
import os

BASE_DIR = os.path.abspath(os.path.dirname(__file__))
DATABASE_PATH = os.path.join(BASE_DIR, "database", "math_checker.db")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
print("DATABASE_PATH:", DATABASE_PATH)  # üîπ –í—ã–≤–æ–¥ –ø—É—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å

SQLALCHEMY_DATABASE_URI = f"sqlite:///{DATABASE_PATH}"
SQLALCHEMY_TRACK_MODIFICATIONS = False
import os
from dotenv import load_dotenv

load_dotenv()

BASE_DIR = os.path.abspath(os.path.dirname(__file__))
DATABASE_PATH = os.path.join(BASE_DIR, "database", "math_checker.db")

class Config:
    DB_SECRET_KEY = os.getenv('DB_SECRET_KEY', '23e629b053aeda6ff423b58a99f861cecd1670e05af7bb9ea55757f419e2a0dcdab40e36e772fbf55ef0ba5533527e4360ad2c25b740336049a9d30667ca126c')
    SQLALCHEMY_DATABASE_URI = f"sqlite:///{DATABASE_PATH}"
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\models.py ====
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

db = SQLAlchemy()

class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    firstname = db.Column(db.String(100), nullable=False)
    lastname = db.Column(db.String(100), nullable=False)
    username = db.Column(db.String(100), unique=True, nullable=False)
    email = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    bio = db.Column(db.Text, default="")
    image = db.Column(db.String(300), default="")
    role = db.Column(db.String(50), default="student")  # –∏–ª–∏ "admin"
    chat_history = db.Column(db.Text)  # –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å JSON –∫–∞–∫ —Å—Ç—Ä–æ–∫—É

    solutions = db.relationship('Solution', backref='user', lazy=True)

class Task(db.Model):
    __tablename__ = 'tasks'
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text)
    expression = db.Column(db.String(500), nullable=False)  # –∏—Å—Ö–æ–¥–Ω–æ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    limitVar = db.Column(db.String(50), nullable=False)      # –Ω–∞–ø—Ä–∏–º–µ—Ä "x->‚àû"
    expected_value = db.Column(db.String(100), nullable=False)
    category = db.Column(db.String(50), nullable=False)  # –Ω–∞–ø—Ä–∏–º–µ—Ä "–∞–ª–≥–µ–±—Ä–∞", "–≥–µ–æ–º–µ—Ç—Ä–∏—è"
    solutions = db.relationship('Solution', backref='task', lazy=True)

class Solution(db.Model):
    __tablename__ = 'solutions'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    task_id = db.Column(db.Integer, db.ForeignKey('tasks.id'), nullable=False)
    status = db.Column(db.String(50), default="in_progress")  # in_progress, completed, error
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    steps = db.relationship('Step', backref='solution', lazy=True)

class Step(db.Model):
    __tablename__ = 'steps'
    id = db.Column(db.Integer, primary_key=True)
    solution_id = db.Column(db.Integer, db.ForeignKey('solutions.id'), nullable=False)
    step_number = db.Column(db.Integer, nullable=False)
    input_expr = db.Column(db.String(500), nullable=False)
    is_correct = db.Column(db.Boolean, default=True)
    error_type = db.Column(db.String(100))
    hint = db.Column(db.String(300))




==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\profile.py ====
import cloudinary
from flask import Blueprint, request, jsonify
from models import db, User

profile_bp = Blueprint('profile', __name__, url_prefix='/profile')

@profile_bp.route("/<username>", methods=["GET"])
def get_user(username):
    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({"error": "User not found"}), 404
    print(user)
    user_data = {
        "username": user.username,
        "firstname": user.firstname,
        "lastname": user.lastname,
        "email": user.email,
        "bio": user.bio or "",
        "image": user.image or ""
    }
    return jsonify({"user": user_data}), 200


@profile_bp.route('/<username>', methods=['PUT'])
def update_user(username):
    data = request.json
    updated_user = User.update_user_settings(username, data)
    if not updated_user:
        return jsonify({"error": "User not found"}), 404
    
    user_data = {
        "username": updated_user.username,
        "firstname": updated_user.firstname,
        "lastname": updated_user.lastname,
        "email": updated_user.email,
        "bio": updated_user.bio or "",
        "image": updated_user.image or ""
    }
    db.session.commit()
    return jsonify({"user": user_data}), 200

@profile_bp.route('/upload-image', methods=['POST'])
def upload_image():
    if 'image' not in request.files:
        return jsonify({"error": "No image file provided"}), 400
    
    file = request.files['image']
    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400
    
    try:
        upload_result = cloudinary.uploader.upload(file)
        image_url = upload_result.get('secure_url')
        return jsonify({"imageUrl": image_url}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\reports.py ====
import os
import logging
import io
from datetime import datetime
from flask import Blueprint, request, send_file, jsonify
from models import db, Solution, User, Task, Step
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

reports_bp = Blueprint('reports', __name__, url_prefix='/api/reports')

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
font_regular_path = os.path.join(BASE_DIR, "fonts", "DejaVuSans.ttf")
font_bold_path = os.path.join(BASE_DIR, "fonts", "DejaVuSans-Bold.ttf")
logging.info("–ü—É—Ç—å –∫ DejaVuSans: %s", font_regular_path)
logging.info("–ü—É—Ç—å –∫ DejaVuSans-Bold: %s", font_bold_path)

if not os.path.exists(font_regular_path) or not os.path.exists(font_bold_path):
    logging.error("–§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —à—Ä–∏—Ñ—Ç–æ–≤.")
else:
    pdfmetrics.registerFont(TTFont('DejaVuSans', font_regular_path))
    pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', font_bold_path))

def wrap_text(text, max_width, c_obj, font, font_size):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–∫, —á—Ç–æ–±—ã —à–∏—Ä–∏–Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª–∞ max_width.
    """
    words = text.split()
    lines = []
    current_line = ""
    for word in words:
        test_line = f"{current_line} {word}".strip() if current_line else word
        if c_obj.stringWidth(test_line, font, font_size) <= max_width:
            current_line = test_line
        else:
            if current_line:
                lines.append(current_line)
            current_line = word
    if current_line:
        lines.append(current_line)
    return lines

@reports_bp.route('/pdf', methods=['POST'])
def generate_pdf_report():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–æ—Ç—á–µ—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–µ—à–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ä–∞–∑–±–æ—Ä–æ–º –æ—à–∏–±–æ–∫ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏.
    –û–∂–∏–¥–∞–µ—Ç—Å—è JSON —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: period (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2024-01-01:2024-02-01"),
    task_id –∏ student_id (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    """
    try:
        data = request.json
        period = data.get("period")  # —Ñ–æ—Ä–º–∞—Ç "YYYY-MM-DD:YYYY-MM-DD"
        task_id = data.get("task_id")
        student_id = data.get("student_id")

        query = Solution.query
        if period:
            try:
                start_str, end_str = period.split(":")
                start_date = datetime.strptime(start_str, "%Y-%m-%d")
                end_date = datetime.strptime(end_str, "%Y-%m-%d")
                # –†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
                end_date = end_date.replace(hour=23, minute=59, second=59)
                query = query.filter(Solution.created_at >= start_date, Solution.created_at <= end_date)
            except Exception as e:
                logging.error("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: %s", e)
                return jsonify({"message": "Invalid period format. Use YYYY-MM-DD:YYYY-MM-DD"}), 400
        if task_id:
            query = query.filter(Solution.task_id == task_id)
        if student_id:
            query = query.filter(Solution.user_id == student_id)

        solutions = query.all()

        buffer = io.BytesIO()
        c = canvas.Canvas(buffer, pagesize=letter)
        width, height = letter
        margin = 50
        max_text_width = width - 2 * margin
        y = height - margin

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —à–∞–ø–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        def draw_header(c_obj):
            c_obj.setFont("DejaVuSans-Bold", 20)
            c_obj.drawCentredString(width / 2, height - margin + 20, "–û—Ç—á–µ—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—è–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            c_obj.line(margin, height - margin + 10, width - margin, height - margin + 10)

        draw_header(c)
        y -= 40
        c.setFont("DejaVuSans", 12)

        if not solutions:
            wrapped = wrap_text("–ù–µ—Ç —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.", max_text_width, c, "DejaVuSans", 12)
            for line in wrapped:
                c.drawString(margin, y, line)
                y -= 15
        else:
            for sol in solutions:
                if y < margin + 120:
                    c.showPage()
                    draw_header(c)
                    y = height - margin - 30

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ—à–µ–Ω–∏—è
                solution_header = (
                    f"–†–µ—à–µ–Ω–∏–µ ID: {sol.id} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {sol.user.username} | "
                    f"–ó–∞–¥–∞—á–∞: {sol.task.title} | –°—Ç–∞—Ç—É—Å: {sol.status} | –î–∞—Ç–∞: {sol.created_at.strftime('%Y-%m-%d %H:%M')}"
                )
                header_lines = wrap_text(solution_header, max_text_width, c, "DejaVuSans-Bold", 12)
                c.setFont("DejaVuSans-Bold", 12)
                for line in header_lines:
                    c.drawString(margin, y, line)
                    y -= 15
                y -= 5

                c.setFont("DejaVuSans", 11)
                # –í—ã–≤–æ–¥ —à–∞–≥–æ–≤ —Ä–µ—à–µ–Ω–∏—è
                for step in sorted(sol.steps, key=lambda s: s.step_number):
                    step_text = f"–®–∞–≥ {step.step_number}: {step.input_expr} ‚Äî " + ("–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ" if step.is_correct else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    if not step.is_correct:
                        step_text += f" (–û—à–∏–±–∫–∞: {step.error_type}; –ü–æ–¥—Å–∫–∞–∑–∫–∞: {step.hint})"
                    step_lines = wrap_text(step_text, max_text_width - 20, c, "DejaVuSans", 11)
                    for line in step_lines:
                        c.drawString(margin + 20, y, line)
                        y -= 12
                    if y < margin + 50:
                        c.showPage()
                        draw_header(c)
                        y = height - margin - 30

                y -= 10
                c.line(margin, y, width - margin, y)
                y -= 20

        c.showPage()
        c.save()
        buffer.seek(0)
        return send_file(buffer, as_attachment=True, download_name="report.pdf", mimetype="application/pdf")
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: %s", e)
        return jsonify({"message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç", "details": str(e)}), 500



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\requirements.txt ====
Flask
flask-cors
pymongo
python-dotenv
gunicorn
requests
google-generativeai
cloudinary
Flask-SQLAlchemy
reportlab
werkzeug
PyJWT
sympy
latex2sympy2


==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\routes.py ====
from flask import Flask, request, jsonify
from flask_cors import CORS
from models import db, Task, Solution, Step
from checker import check_step
from utils.Auth.auth import signup_handler, signin_handler
import cloudinary
import cloudinary.uploader
from models import User

app = Flask(__name__)
app.config.from_object("config.Config")
db.init_app(app)
CORS(app)

@app.route("/tasks", methods=["GET"])
def get_tasks():
    tasks = Task.query.all()
    return jsonify([{"id": t.id, "title": t.title, "description": t.description, "category": t.category} for t in tasks])

@app.route("/tasks/<int:task_id>/start", methods=["POST"])
def start_solution(task_id):
    solution = Solution(task_id=task_id, status="in_progress")
    db.session.add(solution)
    db.session.commit()
    return jsonify({"solution_id": solution.id})

@app.route("/solutions/<int:solution_id>/check_step", methods=["POST"])
def check_solution_step(solution_id):
    data = request.json
    step_number = data.get("step_number")
    prev_expr = data.get("prev_expr", "")
    curr_expr = data.get("curr_expr", "")

    result = check_step(prev_expr, curr_expr)
    
    step = Step(solution_id=solution_id, step_number=step_number,
                input_expr=curr_expr, is_correct=result["is_correct"],
                error_type=result["error_type"], hint=result["hint"])
    
    db.session.add(step)
    db.session.commit()

    return jsonify(result)

@app.route("/solutions/<int:solution_id>/finish", methods=["POST"])
def finish_solution(solution_id):
    solution = Solution.query.get(solution_id)
    solution.status = "completed"
    db.session.commit()
    return jsonify({"message": "–†–µ—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"})


if __name__ == "__main__":
    with app.app_context():
        db.create_all()
    app.run(debug=True)




==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\solutions.py ====
import logging
import re
import sympy as sp
from flask import Blueprint, request, jsonify, send_file
from flask_cors import cross_origin
from latex2sympy2 import latex2sympy  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ LaTeX –≤ sympy-–≤—ã—Ä–∞–∂–µ–Ω–∏—è
from models import db, Task, Solution, Step, User
from typing import List

solutions_bp = Blueprint('solutions', __name__, url_prefix='/api/solutions')

def normalize_steps_with_limit(steps: List[str]) -> List[str]:
    # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç "\lim", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–≥–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if any("\\lim" in step for step in steps):
        logging.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω —à–∞–≥ —Å '\\lim', –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä LIMIT.")
        return steps
    else:
        # –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª–∏–º–∏—Ç–Ω—ã–µ —à–∞–≥–∏ –∏ —à–∞–≥–æ–≤ >= 2, –≤—Å—Ç–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä "LIMIT" (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Å–µ—Ä–µ–¥–∏–Ω—É)
        if len(steps) >= 2:
            mid = len(steps) // 2
            steps.insert(mid, "LIMIT")
        return steps

def safe_sympify(expr: str):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç LaTeX-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–∏–º–≤–æ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ sympy.
    –ï—Å–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '\\lim', —Ç–æ –≤—ã–¥–µ–ª—è–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–µ–¥–µ–ª —è–≤–Ω–æ.
    –¢–µ–ø–µ—Ä—å –Ω–µ —É–¥–∞–ª—è–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã, –∞ –ø—ã—Ç–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    """
    try:
        expr_strip = expr.strip()
        if expr_strip.upper() == "LIMIT":
            return sp.Integer(0)
        # –ï—Å–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å \lim, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å
        if expr_strip.startswith("\\lim"):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±–µ—Ä—ë—Ç –≤—Å—ë –æ—Ç \lim_{...} –¥–æ –ø–µ—Ä–≤–æ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π –ø–∞—Ä—ã —Å–∫–æ–±–æ–∫ –ø–æ—Å–ª–µ \right)
            pattern = re.compile(r"\\lim_\{([^}]+)\\to\s*([^}]+)\}(.*)")
            m = pattern.search(expr_strip)
            if m:
                var_str = m.group(1).strip()
                limit_val_str = m.group(2).strip()
                rest = m.group(3).strip()
                # –ï—Å–ª–∏ –≤–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –µ—Å—Ç—å –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π),
                # –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã–¥–µ–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç \left( –¥–æ \right)
                start = rest.find("\\left(")
                end = rest.rfind("\\right)")
                if start != -1 and end != -1 and end > start:
                    inner_expr_str = rest[start:end+len("\\right)")]
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—Ä–∞–º–ª—è—é—â–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –±–µ—Ä–µ–º –≤–µ—Å—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
                    inner_expr_str = rest
                var = sp.Symbol(var_str)
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫—É –ø—Ä–µ–¥–µ–ª–∞
                if limit_val_str in ["‚àû", "infty", "infinity"]:
                    limit_val = sp.oo
                elif limit_val_str in ["-‚àû", "-infty", "-infinity"]:
                    limit_val = -sp.oo
                else:
                    # –ü—Ä–æ–±—É–µ–º –≤—ã—á–∏—Å–ª–∏—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                    limit_val = safe_sympify(limit_val_str)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                inner_expr = latex2sympy(inner_expr_str)
                computed_limit = sp.limit(inner_expr, var, limit_val)
                logging.info(f"–í—ã—á–∏—Å–ª–µ–Ω –ø—Ä–µ–¥–µ–ª –¥–ª—è {expr_strip}: {computed_limit}")
                return computed_limit
            else:
                # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –ø–æ–¥–æ—à—ë–ª, –ø—ã—Ç–∞–µ–º—Å—è –æ–±—ã—á–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                return latex2sympy(expr_strip)
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π ‚Äì –æ–±—ã—á–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        return latex2sympy(expr_strip)
    except Exception as e:
        logging.error(f"Expression parsing error: '{expr}' - {str(e)}")
        raise ValueError(f"Cannot parse expression '{expr}': {str(e)}")

def check_algebraic_step(prev_expr_str: str, curr_expr_str: str, tolerance=1e-6):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —à–∞–≥–∞–º–∏.
    –ï—Å–ª–∏ –æ–±–∞ —à–∞–≥–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å \lim ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—Ç–∏ –ª–∏–º–∏—Ç–∞.
    –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—ã—á–Ω–∞—è —Å–∏–º–≤–æ–ª—å–Ω–∞—è –∏ —á–∏—Å–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.
    """
    try:
        if prev_expr_str.strip().upper() == "LIMIT" or curr_expr_str.strip().upper() == "LIMIT":
            return {"is_correct": True, "error_type": None, "hint": None}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ–±–∞ —à–∞–≥–∞ ‚Äî –ª–∏–º–∏—Ç–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        if prev_expr_str.strip().startswith("\\lim") and curr_expr_str.strip().startswith("\\lim"):
            lim_pattern = re.compile(r"\\lim_\{[^}]+\}(.*)")

            prev_match = lim_pattern.search(prev_expr_str)
            curr_match = lim_pattern.search(curr_expr_str)

            if prev_match and curr_match:
                prev_inner = prev_match.group(1).strip()
                curr_inner = curr_match.group(1).strip()

                prev_inner_expr = sp.simplify(safe_sympify(prev_inner))
                curr_inner_expr = sp.simplify(safe_sympify(curr_inner))

                if sp.simplify(prev_inner_expr - curr_inner_expr) == 0:
                    return {"is_correct": True, "error_type": None, "hint": None}

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–æ—á–∫–∞–º
                x = sp.Symbol("x")
                test_values = [2, 5, 10, 50, 100]
                for val in test_values:
                    try:
                        prev_val = float(prev_inner_expr.evalf(subs={x: val}))
                        curr_val = float(curr_inner_expr.evalf(subs={x: val}))
                        if abs(prev_val - curr_val) > tolerance:
                            return {
                                "is_correct": False,
                                "error_type": "algebraic_error",
                                "hint": f"(–≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–¥–µ–ª–∞) –ø—Ä–∏ x={val}: –±—ã–ª–æ {prev_val:.6f}, —Å—Ç–∞–ª–æ {curr_val:.6f}"
                            }
                    except Exception as e:
                        logging.warning(f"Inner limit eval error: {e}")
                        continue

        # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        prev_expr = sp.simplify(safe_sympify(prev_expr_str))
        curr_expr = sp.simplify(safe_sympify(curr_expr_str))

        if sp.simplify(prev_expr - curr_expr) == 0:
            return {"is_correct": True, "error_type": None, "hint": None}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —á–∏—Å–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        x = sp.Symbol('x')
        test_values = [2, 5, 10, 50, 100]
        for val in test_values:
            try:
                prev_val = float(prev_expr.evalf(subs={x: val}))
                curr_val = float(curr_expr.evalf(subs={x: val}))
                if abs(prev_val - curr_val) > tolerance:
                    return {
                        "is_correct": False,
                        "error_type": "algebraic_error",
                        "hint": f"–û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–¥–µ–ª–∞: –ø—Ä–∏ x={val}: –±—ã–ª–æ {prev_val:.6f}, —Å—Ç–∞–ª–æ {curr_val:.6f}"
                    }
            except Exception as e:
                logging.warning(f"Outer eval error: {e}")
                continue

        return {"is_correct": True, "error_type": None, "hint": None}

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —à–∞–≥–∞: {str(e)}")
        return {"is_correct": False, "error_type": "parse_error", "hint": str(e)}

def check_limit(expr_str: str, var_str: str, limit_point: str):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–µ–¥–µ–ª –≤—ã—Ä–∞–∂–µ–Ω–∏—è expr_str –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π var_str –ø—Ä–∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–∏ –∫ limit_point.
    """
    try:
        expr = safe_sympify(expr_str)
        var = sp.Symbol(var_str)
        if limit_point in ["oo", "‚àû", "infty", "infinity"]:
            limit_result = sp.limit(expr, var, sp.oo)
        elif limit_point in ["-oo", "-‚àû", "-infty", "-infinity"]:
            limit_result = sp.limit(expr, var, -sp.oo)
        else:
            limit_result = sp.limit(expr, var, limit_point)
        logging.info(f"Computed limit for '{expr_str}': {limit_result}")
        return {"is_correct": True, "computed_limit": limit_result, "error_type": None, "hint": None}
    except Exception as e:
        logging.error(f"Error computing limit: {str(e)}")
        return {"is_correct": False, "computed_limit": None, "error_type": "limit_error", "hint": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–µ–ª–∞: {str(e)}"}

def compare_limit_values(student_result, expected_result):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥–µ–ª–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç–æ–º, —Å –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç (—É—á–∏—Ç—ã–≤–∞—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏), –∏–Ω–∞—á–µ False.
    """
    try:
        if (student_result == sp.oo and expected_result == sp.oo) or (student_result == -sp.oo and expected_result == -sp.oo):
            return True
        diff = sp.simplify(student_result - expected_result)
        return diff == 0
    except Exception:
        return str(student_result) == str(expected_result)

@solutions_bp.route('/check/limit', methods=['POST'])
@cross_origin()
def check_solution():
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON:
    {
        "taskId": <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏>,
        "steps": [
            "—à–∞–≥ 1", "—à–∞–≥ 2", ..., "LIMIT", "–æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"
        ]
    }
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—à–∞–≥–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É: 
    - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π.
    - –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–æ–≥–æ —à–∞–≥–∞.
    - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–∞.
    """
    data = request.json
    logging.info(f"Received solution check request: {data}")

    if not data or "taskId" not in data or "steps" not in data:
        return jsonify({"error": "Invalid request format"}), 400

    task_id = data["taskId"]
    steps_raw = data["steps"]
    logging.info(f"Received steps: {steps_raw}")

    if not isinstance(steps_raw, list) or len(steps_raw) < 2:
        return jsonify({
            "success": False,
            "errors": [{"step": 1, "error": "–†–µ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –∏–∑ –¥–≤—É—Ö —à–∞–≥–æ–≤"}]
        }), 400

    # –ï—Å–ª–∏ —Å—Ä–µ–¥–∏ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏—Ö —à–∞–≥–æ–≤ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ "\lim", –≤—Å—Ç–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä "LIMIT"
    steps = normalize_steps_with_limit(steps_raw)
    task = Task.query.get(task_id)
    if not task:
        return jsonify({"error": "Task not found"}), 404

    errors = []
    algebraic_steps = []
    found_limit = False
    limit_index = -1

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏ (–¥–æ –º–∞—Ä–∫–µ—Ä–∞ "LIMIT", –µ—Å–ª–∏ –æ–Ω –≤—Å—Ç–∞–≤–ª–µ–Ω)
    for i, step in enumerate(steps):
        if step.strip().upper() == "LIMIT":
            found_limit = True
            limit_index = i
            break
        algebraic_steps.append(step)

    if not algebraic_steps:
        return jsonify({
            "success": False,
            "errors": [{"step": 1, "error": "–ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", "hint": "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥ –ø–µ—Ä–µ–¥ LIMIT"}]
        }), 200

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏—Ö —à–∞–≥–æ–≤
    for i in range(len(algebraic_steps) - 1):
        res = check_algebraic_step(algebraic_steps[i], algebraic_steps[i + 1])
        if not res["is_correct"]:
            errors.append({
                "step": i + 2,
                "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
                "hint": res["hint"] or "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"
            })

    computed_limit = None
    if found_limit and not errors:
        try:
            # –î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–µ–¥–µ–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–π —à–∞–≥
            last_expr = algebraic_steps[-1]
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ —Ç–æ—á–∫—É –ø—Ä–µ–¥–µ–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ task.limitVar (–Ω–∞–ø—Ä–∏–º–µ—Ä, "x‚Üíoo")
            limit_var = "x"  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            limit_point = "oo"
            if task.limitVar:
                parts = task.limitVar.split("‚Üí")
                if len(parts) == 2:
                    limit_var = parts[0].strip()
                    limit_point = parts[1].strip()
            limit_res = check_limit(last_expr, limit_var, limit_point)
            computed_limit = limit_res.get("computed_limit")
            if not limit_res["is_correct"]:
                errors.append({
                    "step": limit_index + 1,
                    "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–µ–ª–∞",
                    "hint": limit_res["hint"]
                })
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ LIMIT —É–∫–∞–∑–∞–Ω –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äì —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –µ–≥–æ —Å –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–µ–ª–æ–º
            if limit_index < len(steps) - 1 and not errors:
                student_answer = steps[-1]
                try:
                    if student_answer.strip() in ["\\infty", "\\infinity", "‚àû"]:
                        student_result = sp.oo
                    elif student_answer.strip() in ["-\\infty", "-\\infinity", "-‚àû"]:
                        student_result = -sp.oo
                    else:
                        student_result = sp.simplify(safe_sympify(student_answer))
                    if not compare_limit_values(student_result, computed_limit):
                        errors.append({
                            "step": len(steps),
                            "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
                            "hint": f"–ò—Ç–æ–≥–æ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–≤–Ω—è—Ç—å—Å—è {computed_limit}"
                        })
                except Exception as e:
                    errors.append({
                        "step": len(steps),
                        "error": "–û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞",
                        "hint": f"–û—à–∏–±–∫–∞: {str(e)}"
                    })
        except Exception as e:
            logging.error(f"Limit calculation error: {str(e)}")
            errors.append({
                "step": limit_index + 1,
                "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–µ–ª–∞",
                "hint": str(e)
            })

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –∏ —à–∞–≥–∏ –≤ –±–∞–∑—É
    user_id = User.query.filter_by(username=data["user"]).first().id if User.query.filter_by(username=data["user"]).first() else 1
    solution = Solution(task_id=task.id, user_id=user_id, status="in_progress")
    db.session.add(solution)
    db.session.flush()

    for i, step in enumerate(steps, start=1):
        is_correct = (len(errors) == 0)
        step_record = Step(
            solution_id=solution.id,
            step_number=i,
            input_expr=step,
            is_correct=is_correct,
            error_type=None if is_correct else "error",
            hint=""
        )
        db.session.add(step_record)

    solution.status = "completed" if not errors else "error"
    db.session.commit()

    if errors:
        return jsonify({"success": False, "errors": errors, "solution_id": solution.id}), 200

    return jsonify({
        "success": True,
        "message": f"–†–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ. –ü—Ä–µ–¥–µ–ª = {computed_limit}" if computed_limit is not None else "–†–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ",
        "solution_id": solution.id
    }), 200



@solutions_bp.route('/last/<int:task_id>', methods=['GET'])
@cross_origin()
def get_last_solution(task_id):
    solution = Solution.query.filter_by(task_id=task_id).order_by(Solution.created_at.desc()).first()
    
    if not solution:
        return jsonify({"latex": ""})

    steps = Step.query.filter_by(solution_id=solution.id).order_by(Step.step_number).all()
    latex_expr = " = ".join(step.input_expr for step in steps)
    return jsonify({"latex": latex_expr})


@solutions_bp.route('/check/integral', methods=['POST'])
@cross_origin()
def check_integral():
    data = request.json
    if not data or "taskId" not in data or "steps" not in data:
        return jsonify({"error": "Invalid request format"}), 400

    task = Task.query.get(data["taskId"])
    if not task:
        return jsonify({"error": "Task not found"}), 404

    steps = data["steps"]
    errors = []

    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        expected = sp.simplify(latex2sympy(task.expected_value))
        student = sp.simplify(latex2sympy(steps[-1]))

        if not sp.simplify(expected - student) == 0:
            errors.append({
                "step": len(steps),
                "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è",
                "hint": f"–û–∂–∏–¥–∞–µ—Ç—Å—è: {task.expected_value}"
            })

    except Exception as e:
        errors.append({
            "step": len(steps),
            "error": "–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞",
            "hint": str(e)
        })
    user_id = User.query.filter_by(username=data["user"]).first().id if User.query.filter_by(username=data["user"]).first() else 1

    solution = Solution(task_id=task.id, user_id=user_id, status="completed" if not errors else "error")
    db.session.add(solution)
    db.session.flush()

    for i, step in enumerate(steps):
        db.session.add(Step(
            solution_id=solution.id,
            step_number=i + 1,
            input_expr=step,
            is_correct=(len(errors) == 0),
            error_type=None if len(errors) == 0 else "error",
            hint=""
        ))

    db.session.commit()

    if errors:
        return jsonify({"success": False, "errors": errors, "solution_id": solution.id}), 200

    return jsonify({"success": True, "message": "–†–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ", "solution_id": solution.id}), 200


@solutions_bp.route('/check/algebra', methods=['POST'])
@cross_origin()
def check_algebra():
    data = request.json
    if not data or "taskId" not in data or "steps" not in data:
        return jsonify({"error": "Invalid request format"}), 400

    task = Task.query.get(data["taskId"])
    if not task:
        return jsonify({"error": "Task not found"}), 404

    steps = data["steps"]
    errors = []

    try:
        for i in range(len(steps) - 1):
            lhs = sp.simplify(latex2sympy(steps[i]))
            rhs = sp.simplify(latex2sympy(steps[i + 1]))

            if not sp.simplify(lhs - rhs) == 0:
                errors.append({
                    "step": i + 2,
                    "error": "–ù–µ–≤–µ—Ä–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
                    "hint": f"–®–∞–≥ {i + 2} –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ"
                })
    except Exception as e:
        errors.append({
            "step": len(steps),
            "error": "–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è",
            "hint": str(e)
        })

    user_id = User.query.filter_by(username=data["user"]).first().id if User.query.filter_by(username=data["user"]).first() else 1
    solution = Solution(task_id=task.id, user_id=user_id, status="completed" if not errors else "error")
    db.session.add(solution)
    db.session.flush()

    for i, step in enumerate(steps):
        db.session.add(Step(
            solution_id=solution.id,
            step_number=i + 1,
            input_expr=step,
            is_correct=(len(errors) == 0),
            error_type=None if len(errors) == 0 else "error",
            hint=""
        ))

    db.session.commit()

    if errors:
        return jsonify({"success": False, "errors": errors, "solution_id": solution.id}), 200

    return jsonify({"success": True, "message": "–†–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ", "solution_id": solution.id}), 200



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\solution_integral.py ====
import logging
import sympy as sp
from flask import Blueprint, request, jsonify
from models import db, Task, Solution, Step, User
from flask_cors import cross_origin
from latex2sympy2 import latex2sympy  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ LaTeX –≤ Sympy
from typing import List
import re

solution_integral_bp = Blueprint('solution_integral', __name__, url_prefix='/api/solutions')

def safe_sympify(expr):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç LaTeX-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç sympy, –∏—Å–ø–æ–ª—å–∑—É—è latex2sympy2."""
    print(f"Parsed expression: {expr}")
    try:
        sympy_expr = latex2sympy(expr)
        return sympy_expr
    except Exception as e:
        logging.error(f"Expression parsing error: '{expr}' - {str(e)}")
        raise ValueError(f"Cannot parse expression '{expr}': {str(e)}")

def evaluate_integrals(expr):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã Integral –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –∏—Ö,
    –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞–ª–æ–≤.
    """
    integrals = list(expr.atoms(sp.Integral))
    for integral in integrals:
        try:
            evaluated = sp.integrate(integral.function, *integral.limits)
            expr = expr.subs(integral, evaluated)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞ {integral}: {e}")
    return expr

def check_algebraic_step(prev_expr_str, curr_expr_str, tolerance=1e-10):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —à–∞–≥–∞–º–∏.
    –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ —à–∞–≥–æ–≤ —Ä–∞–≤–µ–Ω "LIMIT", –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.
    
    1. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ LaTeX –≤ sympy-–≤—ã—Ä–∞–∂–µ–Ω–∏—è.
    2. –í—ã—á–∏—Å–ª—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã –≤–Ω—É—Ç—Ä–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π (—á–µ—Ä–µ–∑ evaluate_integrals) –∏ —É–ø—Ä–æ—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    3. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (equals), –∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äì —á–∏—Å–ª–µ–Ω–Ω–∞—è,
       –ø–æ–¥—Å—Ç–∞–≤–ª—è—è —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π \( x \).
    """
    try:
        if prev_expr_str.strip().upper() == "LIMIT" or curr_expr_str.strip().upper() == "LIMIT":
            return {"is_correct": True, "error_type": None, "hint": None}
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–∏–º–≤–æ–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–æ–≤
        prev_expr_raw = safe_sympify(prev_expr_str)
        curr_expr_raw = safe_sympify(curr_expr_str)
        prev_expr = sp.simplify(evaluate_integrals(prev_expr_raw))
        curr_expr = sp.simplify(evaluate_integrals(curr_expr_raw))
        
        # –°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if prev_expr.equals(curr_expr):
            return {"is_correct": True, "error_type": None, "hint": None}
        
        # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–∏—Å–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        x = sp.Symbol('x')
        test_values = [1, 2, 3, 5, 10, 100]
        for val in test_values:
            try:
                prev_val = float(prev_expr.subs({x: val}))
                curr_val = float(curr_expr.subs({x: val}))
                if abs(prev_val - curr_val) > tolerance:
                    return {
                        "is_correct": False,
                        "error_type": "algebraic_error",
                        "hint": f"–ü—Ä–∏ x={val}: –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = {prev_val:.6f}, —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = {curr_val:.6f}"
                    }
            except Exception:
                continue
        return {"is_correct": True, "error_type": None, "hint": None}
    except Exception as e:
        logging.error(f"Error checking step: {str(e)}")
        return {"is_correct": False, "error_type": "parse_error", "hint": f"–û—à–∏–±–∫–∞: {str(e)}"}

def check_integral_solution_final(final_solution_str, var_str="x"):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ –í–æ–ª—å—Ç–µ—Ä—Ä—ã –≤—Ç–æ—Ä–æ–≥–æ —Ä–æ–¥–∞:
        œÜ(x) = x - ‚à´‚ÇÄÀ£ (x-t) œÜ(t) dt.
    
    –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—Ç—å —Å–ª–µ–¥—É—é—â–µ–º—É:
    
        1. –ù–∞—á–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: œÜ(0) = 0.
        2. –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –≤ —Ç–æ—á–∫–µ 0: œÜ'(0) = 1.
        3. –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: œÜ''(x) + œÜ(x) = 0.
    
    –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Ä–µ—à–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º (–∫–∞–∫ –¥–ª—è sin x).
    """
    try:
        x = sp.Symbol(var_str)
        F_expr = sp.simplify(safe_sympify(final_solution_str))
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è: œÜ(0)=0
        if not sp.Eq(F_expr.subs(x, 0), 0):
            return {"is_correct": False, "error_type": "integral_error", 
                    "hint": f"–ù–∞—á–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ: œÜ(0) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0, –ø–æ–ª—É—á–µ–Ω–æ {F_expr.subs(x, 0)}"}
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π –≤ –Ω—É–ª–µ: œÜ'(0)=1
        F_prime = sp.diff(F_expr, x)
        if not sp.Eq(F_prime.subs(x, 0), 1):
            return {"is_correct": False, "error_type": "integral_error", 
                    "hint": f"–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –≤ —Ç–æ—á–∫–µ 0 –Ω–µ–≤–µ—Ä–Ω–∞: œÜ'(0) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1, –ø–æ–ª—É—á–µ–Ω–æ {F_prime.subs(x, 0)}"}
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è: œÜ''(x)+œÜ(x)=0
        F_double = sp.diff(F_expr, x, 2)
        residual = sp.simplify(F_double + F_expr)
        if not residual.equals(0):
            # –ü—Ä–æ–≤–µ—Ä–∏–º –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π x
            test_values = [0.5, 1, 2]
            for val in test_values:
                res_val = residual.subs(x, val)
                if abs(float(res_val)) > 1e-6:
                    return {"is_correct": False, "error_type": "integral_error", 
                            "hint": f"–§—É–Ω–∫—Ü–∏—è –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏—é: œÜ''(x) + œÜ(x) ‚â† 0 –ø—Ä–∏ x={val}, –ø–æ–ª—É—á–µ–Ω–æ {res_val}"}
        return {"is_correct": True, "error_type": None, "hint": None}
    except Exception as e:
        logging.error(f"Error checking integral solution: {str(e)}")
        return {"is_correct": False, "error_type": "parse_error", "hint": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"}

@solution_integral_bp.route('/check-integral', methods=['POST'])
@cross_origin()
def check_integral_solution():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏.
    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç JSON:
    {
      "taskId": <task_id>,
      "phiSteps": [
         { "label": "\\varphi_0(x)", "steps": ["—à–∞–≥ 1", "—à–∞–≥ 2", ...] },
         { ... }  // –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Å–∫–æ–ª—å–∫–æ œÜ-—Ñ—É–Ω–∫—Ü–∏–π
      ],
      "finalSolution": "LaTeX —Å—Ç—Ä–æ–∫–∏ —Å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º"
    }
    
    –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –í–æ–ª—å—Ç–µ—Ä—Ä—ã –≤—Ç–æ—Ä–æ–≥–æ —Ä–æ–¥–∞ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç –≤–∏–¥:
         œÜ(x) = x - ‚à´‚ÇÄÀ£ (x-t) œÜ(t) dt.
    """
    data = request.json
    logging.info(f"Received integral solution check request: {data}")
    
    if not data or "taskId" not in data or "phiSteps" not in data or "finalSolution" not in data:
        return jsonify({"error": "Invalid request format"}), 400

    task_id = data["taskId"]
    phi_steps = data["phiSteps"]
    final_solution = data["finalSolution"]

    if not isinstance(phi_steps, list) or len(phi_steps) < 1:
        return jsonify({
            "success": False,
            "errors": [{"phiIndex": 0, "error": "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ œÜ-—Ñ—É–Ω–∫—Ü–∏—è —Å —à–∞–≥–∞–º–∏"}]
        }), 400

    task = Task.query.get(task_id)
    if not task:
        return jsonify({"error": "Task not found"}), 404

    errors = []  # –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –¥–ª—è œÜ-—Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —à–∞–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π œÜ-—Ñ—É–Ω–∫—Ü–∏–∏
    for phi_index, phi in enumerate(phi_steps):
        if "steps" not in phi or not isinstance(phi["steps"], list):
            errors.append({
                "phiIndex": phi_index,
                "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —à–∞–≥–∏ –¥–ª—è œÜ-—Ñ—É–Ω–∫—Ü–∏–∏",
                "hint": "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥ –¥–ª—è —ç—Ç–æ–π œÜ-—Ñ—É–Ω–∫—Ü–∏–∏"
            })
            continue

        steps = phi["steps"]
        if len(steps) < 1:
            errors.append({
                "phiIndex": phi_index,
                "error": "–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥",
                "hint": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —à–∞–≥–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π œÜ-—Ñ—É–Ω–∫—Ü–∏–∏"
            })
            continue

        if len(steps) == 1:
            continue

        for i in range(len(steps) - 1):
            result = check_algebraic_step(steps[i], steps[i + 1])
            if not result["is_correct"]:
                errors.append({
                    "phiIndex": phi_index,
                    "stepIndex": i + 1,
                    "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
                    "hint": result["hint"] or "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —à–∞–≥–∏"
                })

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    if not final_solution.strip():
        errors.append({
            "phiIndex": -1,
            "error": "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
            "hint": "–í–≤–µ–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞–ª—É"
        })
    else:
        integral_check = check_integral_solution_final(final_solution, var_str="x")
        if not integral_check["is_correct"]:
            errors.append({
                "phiIndex": -1,
                "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
                "hint": integral_check["hint"]
            })

    user_id = User.query.filter_by(username=data["user"]).first().id if User.query.filter_by(username=data["user"]).first() else 1
    solution = Solution(task_id=task.id, user_id=user_id, status="in_progress")
    db.session.add(solution)
    db.session.flush()  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è solution.id –±–µ–∑ –∫–æ–º–º–∏—Ç–∞

    step_counter = 1
    for phi_index, phi in enumerate(phi_steps):
        steps = phi.get("steps", [])
        for step_index, step in enumerate(steps):
            is_error = False
            error_hint = ""
            for error in errors:
                if error.get("phiIndex") == phi_index and error.get("stepIndex") == step_index:
                    is_error = True
                    error_hint = error.get("hint", "")
                    break
            step_record = Step(
                solution_id=solution.id,
                step_number=step_counter,
                input_expr=phi_index*1000+step,
                is_correct=not is_error,
                error_type="error" if is_error else None,
                hint=error_hint
            )
            db.session.add(step_record)
            step_counter += 1

    final_error = next((error for error in errors if error.get("phiIndex") == -1), None)
    final_step_record = Step(
        solution_id=solution.id,
        step_number=step_counter,
        input_expr=final_solution,
        is_correct=not final_error,
        error_type="error" if final_error else None,
        hint=final_error.get("hint", "") if final_error else ""
    )
    db.session.add(final_step_record)

    solution.status = "completed" if not errors else "error"
    db.session.commit()

    if errors:
        return jsonify({
            "success": False,
            "errors": errors,
            "solution_id": solution.id
        })
    return jsonify({
        "success": True,
        "message": "–†–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ.",
        "solution_id": solution.id
    })




@solution_integral_bp.route('/last-integral/<int:task_id>', methods=['GET'])
def get_last_integral_solution(task_id):
    solution = Solution.query.filter_by(task_id=task_id).order_by(Solution.created_at.desc()).first()
    if not solution:
        return jsonify({"phiSteps": [], "final": ""})

    steps = Step.query.filter_by(solution_id=solution.id).order_by(Step.step_number).all()

    phi_dict = {}
    final = ""

    for step in steps:
        try:
            if step == steps[-1]:
                final = step.input_expr
                continue

            # –ü–∞—Ä—Å–∏–º phi_index –∏ —à–∞–≥
            val = step.input_expr
            if isinstance(val, str) and val.isdigit():
                val = int(val)

            phi_index = val // 1000
            step_latex = val % 1000

            label = f"\\varphi_{phi_index}(x)"
            if label not in phi_dict:
                phi_dict[label] = []
            phi_dict[label].append(str(step_latex))
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —à–∞–≥–∞: {e}")

    phiSteps = [{"label": label, "steps": steps} for label, steps in phi_dict.items()]

    return jsonify({"phiSteps": phiSteps, "final": final})



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\tasks.py ====
from flask import Blueprint, request, jsonify
from models import db, Task, Solution
from datetime import datetime
tasks_bp = Blueprint('tasks', __name__, url_prefix='/api/tasks')

@tasks_bp.route('', methods=['GET'])
def get_tasks():
    tasks = Task.query.all()
    tasks_list = []
    for t in tasks:
        tasks_list.append({
            "id": t.id,
            "title": t.title,
            "description": t.description,
            "expression": t.expression,
            "limitVar": t.limitVar,
            "expected_value": t.expected_value,
            "category": t.category
        })
    return jsonify({"tasks": tasks_list}), 200

@tasks_bp.route('/<int:task_id>', methods=['GET'])
def get_task(task_id):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ ID.
    """
    task = Task.query.get(task_id)
    if not task:
        return jsonify({"message": "Task not found"}), 404
    return jsonify({
        "id": task.id,
        "title": task.title,
        "description": task.description,
        "expression": task.expression,
        "limitVar": task.limitVar,
        "expected_value": task.expected_value,
        "category": task.category
    }), 200

@tasks_bp.route('', methods=['POST'])
def create_task():
    data = request.json
    required_fields = ['title', 'expression', 'limitVar', 'expected_value']
    for field in required_fields:
        if field not in data:
            return jsonify({"message": f"{field} is required"}), 400

    new_task = Task(
        title=data['title'],
        description=data.get('description', ''),
        expression=data['expression'],
        limitVar=data['limitVar'],
        expected_value=data['expected_value'],
        category=data['category']  
    )
    db.session.add(new_task)
    db.session.commit()
    return jsonify({"message": "Task created successfully", "task_id": new_task.id}), 201

@tasks_bp.route('/<int:task_id>', methods=['PUT'])
def update_task(task_id):
    task = Task.query.get(task_id)
    if not task:
        return jsonify({"message": "Task not found"}), 404
    data = request.json
    task.title = data.get('title', task.title)
    task.description = data.get('description', task.description)
    task.expression = data.get('expression', task.expression)
    task.limitVar = data.get('limitVar', task.limitVar)
    task.expected_value = data.get('expected_value', task.expected_value)
    task.category = data.get('category', task.category)
    db.session.commit()
    return jsonify({"message": "Task updated successfully"}), 200

@tasks_bp.route('/<int:task_id>', methods=['DELETE'])
def delete_task(task_id):
    task = Task.query.get(task_id)
    if not task:
        return jsonify({"message": "Task not found"}), 404
    db.session.delete(task)
    db.session.commit()
    return jsonify({"message": "Task deleted successfully"}), 200

@tasks_bp.route('/<int:task_id>/start', methods=['POST'])
def start_solution(task_id):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø—É—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ (Solution) –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ä–µ—à–µ–Ω–∏—è.
    """
    task = Task.query.get(task_id)
    if not task:
        return jsonify({"message": "Task not found"}), 404

    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID = 1 (–∑–∞–≥–ª—É—à–∫–∞)
    user_id = 1
    new_solution = Solution(task_id=task_id, user_id=user_id, status="in_progress", created_at=datetime.utcnow())
    db.session.add(new_solution)
    db.session.commit()

    return jsonify({"solution_id": new_solution.id}), 201


==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\tasks_generator.py ====
import random
import re
import logging
import sympy as sp
from flask import Blueprint, request, jsonify
from models import db, Task

tasks_generator_bp = Blueprint("tasks_generator", __name__, url_prefix="/api/tasks_generator")

# –ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "limits"
TEMPLATES = {
    "limits": [
        {
            "title": "lim (({par_a}x + {par_b})/({par_c}x + {par_d}))^(x+{par_e})",
            "description": r"\lim_{x\to\infty} \left( \frac{{par_a}x + {par_b}}{{par_c}x + {par_d}} \right)^{x+{par_e}}",
            "expression": "(({par_a}*x + {par_b})/({par_c}*x + {par_d}))**(x+{par_e})",
            "limitVar": "x‚Üíoo",
            "expected_value": "{expected_value}",
            "category": "limits",
            "params": {
                "par_a": (1, 5),
                "par_b": (1, 10),
                "par_c": (1, 5),
                "par_d": (1, 10),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "lim (({par_a}x + {par_b})/({par_c}x - {par_d}))^(x+{par_e})",
            "description": r"\lim_{x\to\infty} \left( \frac{{par_a}x + {par_b}}{{par_c}x - {par_d}} \right)^{x+{par_e}}",
            "expression": "(({par_a}*x + {par_b})/({par_c}*x - {par_d}))**(x+{par_e})",
            "limitVar": "x‚Üíoo",
            "expected_value": "{expected_value}",
            "category": "limits",
            "params": {
                "par_a": (1, 5),
                "par_b": (1, 10),
                "par_c": (1, 5),
                "par_d": (1, 10),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "lim (({par_a}x - {par_b})/({par_c}x + {par_d}))^(x+{par_e})",
            "description": r"\lim_{x\to\infty} \left( \frac{{par_a}x - {par_b}}{{par_c}x + {par_d}} \right)^{x+{par_e}}",
            "expression": "(({par_a}*x - {par_b})/({par_c}*x + {par_d}))**(x+{par_e})",
            "limitVar": "x‚Üíoo",
            "expected_value": "{expected_value}",
            "category": "limits",
            "params": {
                "par_a": (1, 5),
                "par_b": (1, 10),
                "par_c": (1, 5),
                "par_d": (1, 10),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "lim (({par_a}x - {par_b})/({par_c}x - {par_d}))^(x-{par_e})",
            "description": r"\lim_{x\to\infty} \left( \frac{{par_a}x - {par_b}}{{par_c}x - {par_d}} \right)^{x-{par_e}}",
            "expression": "(({par_a}*x - {par_b})/({par_c}*x - {par_d}))**(x-{par_e})",
            "limitVar": "x‚Üíoo",
            "expected_value": "{expected_value}",
            "category": "limits",
            "params": {
                "par_a": (1, 5),
                "par_b": (1, 10),
                "par_c": (1, 5),
                "par_d": (1, 10),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "lim (({par_a}x + {par_b})/({par_c}x + {par_d}))^(2x+{par_e})",
            "description": r"\lim_{x\to\infty} \left( \frac{{par_a}x + {par_b}}{{par_c}x + {par_d}} \right)^{2x+{par_e}}",
            "expression": "(({par_a}*x + {par_b})/({par_c}*x + {par_d}))**(2*x+{par_e})",
            "limitVar": "x‚Üíoo",
            "expected_value": "{expected_value}",
            "category": "limits",
            "params": {
                "par_a": (1, 5),
                "par_b": (1, 10),
                "par_c": (1, 5),
                "par_d": (1, 10),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "lim (({par_a}x + {par_b})/({par_c}x - {par_d}))^(2x-{par_e})",
            "description": r"\lim_{x\to\infty} \left( \frac{{par_a}x + {par_b}}{{par_c}x - {par_d}} \right)^{2x-{par_e}}",
            "expression": "(({par_a}*x + {par_b})/({par_c}*x - {par_d}))**(2*x-{par_e})",
            "limitVar": "x‚Üíoo",
            "expected_value": "{expected_value}",
            "category": "limits",
            "params": {
                "par_a": (1, 5),
                "par_b": (1, 10),
                "par_c": (1, 5),
                "par_d": (1, 10),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "lim (({par_a}x - {par_b})/({par_c}x + {par_d}))^(x*{par_e})",
            "description": r"\lim_{x\to\infty} \left( \frac{{par_a}x - {par_b}}{{par_c}x + {par_d}} \right)^{x*{par_e}}",
            "expression": "(({par_a}*x - {par_b})/({par_c}*x + {par_d}))**(x*{par_e})",
            "limitVar": "x‚Üíoo",
            "expected_value": "{expected_value}",
            "category": "limits",
            "params": {
                "par_a": (1, 5),
                "par_b": (1, 10),
                "par_c": (1, 5),
                "par_d": (1, 10),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "lim (({par_a}x - {par_b})/({par_c}x - {par_d}))^(x*{par_e})",
            "description": r"\lim_{x\to\infty} \left( \frac{{par_a}x - {par_b}}{{par_c}x - {par_d}} \right)^{x*{par_e}}",
            "expression": "(({par_a}*x - {par_b})/({par_c}*x - {par_d}))**(x*{par_e})",
            "limitVar": "x‚Üíoo",
            "expected_value": "{expected_value}",
            "category": "limits",
            "params": {
                "par_a": (1, 5),
                "par_b": (1, 10),
                "par_c": (1, 5),
                "par_d": (1, 10),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "lim (({par_a}x + {par_b})/({par_c}x + {par_d}))^(x-{par_e})",
            "description": r"\lim_{x\to\infty} \left( \frac{{par_a}x + {par_b}}{{par_c}x + {par_d}} \right)^{x-{par_e}}",
            "expression": "(({par_a}*x + {par_b})/({par_c}*x + {par_d}))**(x-{par_e})",
            "limitVar": "x‚Üíoo",
            "expected_value": "{expected_value}",
            "category": "limits",
            "params": {
                "par_a": (1, 5),
                "par_b": (1, 10),
                "par_c": (1, 5),
                "par_d": (1, 10),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        {
            "title": "lim (({par_a}x + {par_b})*({par_c}x + {par_d}))^(1/(x+{par_e}))",
            "description": r"\lim_{x\to\infty} \left( ({par_a}x + {par_b})({par_c}x + {par_d}) \right)^{\frac{1}{x+{par_e}}}",
            "expression": "(({par_a}*x + {par_b})*({par_c}*x + {par_d}))**(1/(x+{par_e}))",
            "limitVar": "x‚Üíoo",
            "expected_value": "{expected_value}",
            "category": "limits",
            "params": {
                "par_a": (1, 5),
                "par_b": (1, 10),
                "par_c": (1, 5),
                "par_d": (1, 10),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "lim (sqrt({par_a}x + {par_b})/({par_c}x + {par_d}))^(x+{par_e})",
            "description": r"\lim_{x\to\infty} \left( \frac{\sqrt{{par_a}x + {par_b}}}{{par_c}x + {par_d}} \right)^{x+{par_e}}",
            "expression": "((({par_a}*x + {par_b})**0.5)/({par_c}*x + {par_d}))**(x+{par_e})",
            "limitVar": "x‚Üíoo",
            "expected_value": "{expected_value}",
            "category": "limits",
            "params": {
                "par_a": (1, 5),
                "par_b": (1, 10),
                "par_c": (1, 5),
                "par_d": (1, 10),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "lim (({par_a}x + {par_b})/sqrt({par_c}x + {par_d}))^(x+{par_e})",
            "description": r"\lim_{x\to\infty} \left( \frac{{par_a}x + {par_b}}{\sqrt{{par_c}x + {par_d}}} \right)^{x+{par_e}}",
            "expression": "(({par_a}*x + {par_b})/(({par_c}*x + {par_d})**0.5))**(x+{par_e})",
            "limitVar": "x‚Üíoo",
            "expected_value": "{expected_value}",
            "category": "limits",
            "params": {
                "par_a": (1, 5),
                "par_b": (1, 10),
                "par_c": (1, 5),
                "par_d": (1, 10),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "lim (({par_a}x - {par_b})/({par_c}x + {par_d}))^(x**{par_e})",
            "description": r"\lim_{x\to\infty} \left( \frac{{par_a}x - {par_b}}{{par_c}x + {par_d}} \right)^{x^{ {par_e} }}",
            "expression": "(({par_a}*x - {par_b})/({par_c}*x + {par_d}))**(x**{par_e})",
            "limitVar": "x‚Üíoo",
            "expected_value": "{expected_value}",
            "category": "limits",
            "params": {
                "par_a": (1, 5),
                "par_b": (1, 10),
                "par_c": (1, 5),
                "par_d": (1, 10),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "lim (({par_a}x + {par_b})/({par_c}x - {par_d}))^(x**{par_e})",
            "description": r"\lim_{x\to\infty} \left( \frac{{par_a}x + {par_b}}{{par_c}x - {par_d}} \right)^{x^{ {par_e} }}",
            "expression": "(({par_a}*x + {par_b})/({par_c}*x - {par_d}))**(x**{par_e})",
            "limitVar": "x‚Üíoo",
            "expected_value": "{expected_value}",
            "category": "limits",
            "params": {
                "par_a": (1, 5),
                "par_b": (1, 10),
                "par_c": (1, 5),
                "par_d": (1, 10),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "lim (({par_a}x - {par_b})/({par_c}x + {par_d}))^(1/(x+{par_e}))",
            "description": r"\lim_{x\to\infty} \left( \frac{{par_a}x - {par_b}}{{par_c}x + {par_d}} \right)^{\frac{1}{x+{par_e}}}",
            "expression": "(({par_a}*x - {par_b})/({par_c}*x + {par_d}))**(1/(x+{par_e}))",
            "limitVar": "x‚Üíoo",
            "expected_value": "{expected_value}",
            "category": "limits",
            "params": {
                "par_a": (1, 5),
                "par_b": (1, 10),
                "par_c": (1, 5),
                "par_d": (1, 10),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "lim (({par_a}x - {par_b})/({par_c}x - {par_d}))^(1/(x+{par_e}))",
            "description": r"\lim_{x\to\infty} \left( \frac{{par_a}x - {par_b}}{{par_c}x - {par_d}} \right)^{\frac{1}{x+{par_e}}}",
            "expression": "(({par_a}*x - {par_b})/({par_c}*x - {par_d}))**(1/(x+{par_e}))",
            "limitVar": "x‚Üíoo",
            "expected_value": "{expected_value}",
            "category": "limits",
            "params": {
                "par_a": (1, 5),
                "par_b": (1, 10),
                "par_c": (1, 5),
                "par_d": (1, 10),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        }
    ],
    "integral_volterra_2": [
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 1: {par_a}x - ‚à´‚ÇÄÀ£ (x-t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x - \int_{0}^{x} (x-t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x - integrate((x-t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {
                "par_a": (1, 5),
                "par_b": (0, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 2: {par_a}x + ‚à´‚ÇÄÀ£ (x-t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x + \int_{0}^{x} (x-t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x + integrate((x-t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {
                "par_a": (1, 5),
                "par_b": (0, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 3: {par_a}x - ‚à´‚ÇÄÀ£ (x+t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x - \int_{0}^{x} (x+t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x - integrate((x+t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {
                "par_a": (1, 5),
                "par_b": (0, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 4: {par_a}x + ‚à´‚ÇÄÀ£ (x+t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x + \int_{0}^{x} (x+t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x + integrate((x+t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {
                "par_a": (1, 5),
                "par_b": (0, 3),
                "expected_value": "0"
            }
        },
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –¥–ª—è –∑–∞–¥–∞—á 5-20:
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 5: {par_a}x - ‚à´‚ÇÄÀ£ (x-t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x - \int_{0}^{x} (x-t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x - integrate((x-t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {"par_a": (1, 5), "par_b": (0, 3), "expected_value": "0"}
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 6: {par_a}x + ‚à´‚ÇÄÀ£ (x-t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x + \int_{0}^{x} (x-t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x + integrate((x-t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {"par_a": (1, 5), "par_b": (0, 3), "expected_value": "0"}
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 7: {par_a}x - ‚à´‚ÇÄÀ£ (x+t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x - \int_{0}^{x} (x+t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x - integrate((x+t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {"par_a": (1, 5), "par_b": (0, 3), "expected_value": "0"}
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 8: {par_a}x + ‚à´‚ÇÄÀ£ (x+t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x + \int_{0}^{x} (x+t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x + integrate((x+t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {"par_a": (1, 5), "par_b": (0, 3), "expected_value": "0"}
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 9: {par_a}x - ‚à´‚ÇÄÀ£ (x-t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x - \int_{0}^{x} (x-t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x - integrate((x-t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {"par_a": (1, 5), "par_b": (0, 3), "expected_value": "0"}
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 10: {par_a}x + ‚à´‚ÇÄÀ£ (x-t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x + \int_{0}^{x} (x-t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x + integrate((x-t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {"par_a": (1, 5), "par_b": (0, 3), "expected_value": "0"}
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 11: {par_a}x - ‚à´‚ÇÄÀ£ (x+t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x - \int_{0}^{x} (x+t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x - integrate((x+t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {"par_a": (1, 5), "par_b": (0, 3), "expected_value": "0"}
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 12: {par_a}x + ‚à´‚ÇÄÀ£ (x+t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x + \int_{0}^{x} (x+t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x + integrate((x+t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {"par_a": (1, 5), "par_b": (0, 3), "expected_value": "0"}
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 13: {par_a}x - ‚à´‚ÇÄÀ£ (x-t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x - \int_{0}^{x} (x-t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x - integrate((x-t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {"par_a": (1, 5), "par_b": (0, 3), "expected_value": "0"}
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 14: {par_a}x + ‚à´‚ÇÄÀ£ (x-t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x + \int_{0}^{x} (x-t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x + integrate((x-t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {"par_a": (1, 5), "par_b": (0, 3), "expected_value": "0"}
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 15: {par_a}x - ‚à´‚ÇÄÀ£ (x+t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x - \int_{0}^{x} (x+t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x - integrate((x+t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {"par_a": (1, 5), "par_b": (0, 3), "expected_value": "0"}
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 16: {par_a}x + ‚à´‚ÇÄÀ£ (x+t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x + \int_{0}^{x} (x+t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x + integrate((x+t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {"par_a": (1, 5), "par_b": (0, 3), "expected_value": "0"}
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 17: {par_a}x - ‚à´‚ÇÄÀ£ (x-t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x - \int_{0}^{x} (x-t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x - integrate((x-t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {"par_a": (1, 5), "par_b": (0, 3), "expected_value": "0"}
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 18: {par_a}x + ‚à´‚ÇÄÀ£ (x-t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x + \int_{0}^{x} (x-t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x + integrate((x-t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {"par_a": (1, 5), "par_b": (0, 3), "expected_value": "0"}
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 19: {par_a}x - ‚à´‚ÇÄÀ£ (x+t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x - \int_{0}^{x} (x+t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x - integrate((x+t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {"par_a": (1, 5), "par_b": (0, 3), "expected_value": "0"}
        },
        {
            "title": "–í–æ–ª—å—Ç–µ—Ä—Ä–∞ –∑–∞–¥–∞—á–∞ 20: {par_a}x + ‚à´‚ÇÄÀ£ (x+t)œÜ(t) dt, œÜ(0)={par_b}",
            "description": r"\varphi(x) = {par_a}x + \int_{0}^{x} (x+t)\varphi(t) dt, \quad \varphi(0) = {par_b}",
            "expression": "{par_a}*x + integrate((x+t)*varphi(t), (t,0,x))",
            "limitVar": "0",
            "expected_value": "{expected_value}",
            "category": "integral_volterra_2",
            "params": {"par_a": (1, 5), "par_b": (0, 3), "expected_value": "0"}
        }
    ],
    "integral": [
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } {par_c}x^{ {par_d} } dx",
            "description": r"\int_{{par_a}}^{{par_b}} {par_c}x^{ {par_d} } dx",
            "expression": "integrate({par_c}*x**{par_d}, (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 3),
                "par_b": (4, 10),
                "par_c": (1, 5),
                "par_d": (1, 4),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } {par_c}x^{ {par_d} } dx",
            "description": r"\int_{{par_a}}^{{par_b}} {par_c}x^{ {par_d} } dx",
            "expression": "integrate({par_c}*x**{par_d}, (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 3),
                "par_b": (4, 10),
                "par_c": (1, 5),
                "par_d": (1, 4),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } {par_c}x^{ {par_d} } dx",
            "description": r"\int_{{par_a}}^{{par_b}} {par_c}x^{ {par_d} } dx",
            "expression": "integrate({par_c}*x**{par_d}, (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 3),
                "par_b": (4, 10),
                "par_c": (1, 5),
                "par_d": (1, 4),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } {par_c}x^{ {par_d} } dx",
            "description": r"\int_{{par_a}}^{{par_b}} {par_c}x^{ {par_d} } dx",
            "expression": "integrate({par_c}*x**{par_d}, (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 3),
                "par_b": (4, 10),
                "par_c": (1, 5),
                "par_d": (1, 4),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } {par_c}x^{ {par_d} } dx",
            "description": r"\int_{{par_a}}^{{par_b}} {par_c}x^{ {par_d} } dx",
            "expression": "integrate({par_c}*x**{par_d}, (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 3),
                "par_b": (4, 10),
                "par_c": (1, 5),
                "par_d": (1, 4),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } {par_c}x^{ {par_d} } dx",
            "description": r"\int_{{par_a}}^{{par_b}} {par_c}x^{ {par_d} } dx",
            "expression": "integrate({par_c}*x**{par_d}, (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 3),
                "par_b": (4, 10),
                "par_c": (1, 5),
                "par_d": (1, 4),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } {par_c}x^{ {par_d} } dx",
            "description": r"\int_{{par_a}}^{{par_b}} {par_c}x^{ {par_d} } dx",
            "expression": "integrate({par_c}*x**{par_d}, (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 3),
                "par_b": (4, 10),
                "par_c": (1, 5),
                "par_d": (1, 4),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } {par_c}x^{ {par_d} } dx",
            "description": r"\int_{{par_a}}^{{par_b}} {par_c}x^{ {par_d} } dx",
            "expression": "integrate({par_c}*x**{par_d}, (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 3),
                "par_b": (4, 10),
                "par_c": (1, 5),
                "par_d": (1, 4),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } {par_c}x^{ {par_d} } dx",
            "description": r"\int_{{par_a}}^{{par_b}} {par_c}x^{ {par_d} } dx",
            "expression": "integrate({par_c}*x**{par_d}, (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 3),
                "par_b": (4, 10),
                "par_c": (1, 5),
                "par_d": (1, 4),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } {par_c}x^{ {par_d} } dx",
            "description": r"\int_{{par_a}}^{{par_b}} {par_c}x^{ {par_d} } dx",
            "expression": "integrate({par_c}*x**{par_d}, (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 3),
                "par_b": (4, 10),
                "par_c": (1, 5),
                "par_d": (1, 4),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } ({par_c}x^{ {par_d} } + {par_e}) dx",
            "description": r"\int_{{par_a}}^{{par_b}} ({par_c}x^{ {par_d} } + {par_e}) dx",
            "expression": "integrate({par_c}*x**{par_d} + {par_e}, (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 3),
                "par_b": (4, 10),
                "par_c": (1, 5),
                "par_d": (1, 4),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } ({par_c}x^{ {par_d} } + {par_e}) dx",
            "description": r"\int_{{par_a}}^{{par_b}} ({par_c}x^{ {par_d} } + {par_e}) dx",
            "expression": "integrate({par_c}*x**{par_d} + {par_e}, (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 3),
                "par_b": (4, 10),
                "par_c": (1, 5),
                "par_d": (1, 4),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } ({par_c}x^{ {par_d} } + {par_e}) dx",
            "description": r"\int_{{par_a}}^{{par_b}} ({par_c}x^{ {par_d} } + {par_e}) dx",
            "expression": "integrate({par_c}*x**{par_d} + {par_e}, (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 3),
                "par_b": (4, 10),
                "par_c": (1, 5),
                "par_d": (1, 4),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } ({par_c}x^{ {par_d} } + {par_e}) dx",
            "description": r"\int_{{par_a}}^{{par_b}} ({par_c}x^{ {par_d} } + {par_e}) dx",
            "expression": "integrate({par_c}*x**{par_d} + {par_e}, (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 3),
                "par_b": (4, 10),
                "par_c": (1, 5),
                "par_d": (1, 4),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } ({par_c}x^{ {par_d} } + {par_e}) dx",
            "description": r"\int_{{par_a}}^{{par_b}} ({par_c}x^{ {par_d} } + {par_e}) dx",
            "expression": "integrate({par_c}*x**{par_d} + {par_e}, (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 3),
                "par_b": (4, 10),
                "par_c": (1, 5),
                "par_d": (1, 4),
                "par_e": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } e^{{par_c}x} dx",
            "description": r"\int_{{par_a}}^{{par_b}} e^{{par_c}x} dx",
            "expression": "integrate(exp({par_c}*x), (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 2),
                "par_b": (3, 8),
                "par_c": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } e^{{par_c}x} dx",
            "description": r"\int_{{par_a}}^{{par_b}} e^{{par_c}x} dx",
            "expression": "integrate(exp({par_c}*x), (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 2),
                "par_b": (3, 8),
                "par_c": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } e^{{par_c}x} dx",
            "description": r"\int_{{par_a}}^{{par_b}} e^{{par_c}x} dx",
            "expression": "integrate(exp({par_c}*x), (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 2),
                "par_b": (3, 8),
                "par_c": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } e^{{par_c}x} dx",
            "description": r"\int_{{par_a}}^{{par_b}} e^{{par_c}x} dx",
            "expression": "integrate(exp({par_c}*x), (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 2),
                "par_b": (3, 8),
                "par_c": (1, 3),
                "expected_value": "0"
            }
        },
        {
            "title": "‚à´_{ {par_a} }^{ {par_b} } e^{{par_c}x} dx",
            "description": r"\int_{{par_a}}^{{par_b}} e^{{par_c}x} dx",
            "expression": "integrate(exp({par_c}*x), (x, {par_a}, {par_b}))",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "integral",
            "params": {
                "par_a": (0, 2),
                "par_b": (3, 8),
                "par_c": (1, 3),
                "expected_value": "0"
            }
        }
    ],
    "algebra": [
        {
            "title": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: {par_a}x^2 - {par_b}x + {par_c} = 0",
            "description": "{par_a}x^2 - {par_b}x + {par_c} = 0",
            "expression": "{par_a}*x**2 - {par_b}*x + {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: {par_a}x^2 + {par_b}x - {par_c} = 0",
            "description": "{par_a}x^2 + {par_b}x - {par_c} = 0",
            "expression": "{par_a}*x**2 + {par_b}*x - {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: -{par_a}x^2 + {par_b}x + {par_c} = 0",
            "description": "-{par_a}x^2 + {par_b}x + {par_c} = 0",
            "expression": "-{par_a}*x**2 + {par_b}*x + {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: -{par_a}x^2 - {par_b}x + {par_c} = 0",
            "description": "-{par_a}x^2 - {par_b}x + {par_c} = 0",
            "expression": "-{par_a}*x**2 - {par_b}*x + {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: {par_a}x^2 + {par_b}x + {par_c} = 0",
            "description": "{par_a}x^2 + {par_b}x + {par_c} = 0",
            "expression": "{par_a}*x**2 + {par_b}*x + {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: -{par_a}x^2 + {par_b}x - {par_c} = 0",
            "description": "-{par_a}x^2 + {par_b}x - {par_c} = 0",
            "expression": "-{par_a}*x**2 + {par_b}*x - {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: {par_a}x^2 - {par_b}x - {par_c} = 0",
            "description": "{par_a}x^2 - {par_b}x - {par_c} = 0",
            "expression": "{par_a}*x**2 - {par_b}*x - {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: -{par_a}x^2 - {par_b}x - {par_c} = 0",
            "description": "-{par_a}x^2 - {par_b}x - {par_c} = 0",
            "expression": "-{par_a}*x**2 - {par_b}*x - {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: {par_a}x^2 - {par_b}x + {par_c} = 0 (–≤–∞—Ä–∏–∞–Ω—Ç 9)",
            "description": "{par_a}x^2 - {par_b}x + {par_c} = 0",
            "expression": "{par_a}*x**2 - {par_b}*x + {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: {par_a}x^2 + {par_b}x - {par_c} = 0 (–≤–∞—Ä–∏–∞–Ω—Ç 10)",
            "description": "{par_a}x^2 + {par_b}x - {par_c} = 0",
            "expression": "{par_a}*x**2 + {par_b}*x - {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: -{par_a}x^2 + {par_b}x + {par_c} = 0 (–≤–∞—Ä–∏–∞–Ω—Ç 11)",
            "description": "-{par_a}x^2 + {par_b}x + {par_c} = 0",
            "expression": "-{par_a}*x**2 + {par_b}*x + {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: -{par_a}x^2 - {par_b}x + {par_c} = 0 (–≤–∞—Ä–∏–∞–Ω—Ç 12)",
            "description": "-{par_a}x^2 - {par_b}x + {par_c} = 0",
            "expression": "-{par_a}*x**2 - {par_b}*x + {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: {par_a}x^2 + {par_b}x + {par_c} = 0 (–≤–∞—Ä–∏–∞–Ω—Ç 13)",
            "description": "{par_a}x^2 + {par_b}x + {par_c} = 0",
            "expression": "{par_a}*x**2 + {par_b}*x + {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: -{par_a}x^2 + {par_b}x - {par_c} = 0 (–≤–∞—Ä–∏–∞–Ω—Ç 14)",
            "description": "-{par_a}x^2 + {par_b}x - {par_c} = 0",
            "expression": "-{par_a}*x**2 + {par_b}*x - {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: {par_a}x^2 - {par_b}x - {par_c} = 0 (–≤–∞—Ä–∏–∞–Ω—Ç 15)",
            "description": "{par_a}x^2 - {par_b}x - {par_c} = 0",
            "expression": "{par_a}*x**2 - {par_b}*x - {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: -{par_a}x^2 - {par_b}x - {par_c} = 0 (–≤–∞—Ä–∏–∞–Ω—Ç 16)",
            "description": "-{par_a}x^2 - {par_b}x - {par_c} = 0",
            "expression": "-{par_a}*x**2 - {par_b}*x - {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–ù–∞–π–¥–∏—Ç–µ –∫–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è: {par_a}x^2 - {par_b}x + {par_c} = 0 (–≤–∞—Ä–∏–∞–Ω—Ç 17)",
            "description": "{par_a}x^2 - {par_b}x + {par_c} = 0",
            "expression": "{par_a}*x**2 - {par_b}*x + {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–ù–∞–π–¥–∏—Ç–µ –∫–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è: {par_a}x^2 + {par_b}x - {par_c} = 0 (–≤–∞—Ä–∏–∞–Ω—Ç 18)",
            "description": "{par_a}x^2 + {par_b}x - {par_c} = 0",
            "expression": "{par_a}*x**2 + {par_b}*x - {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–ù–∞–π–¥–∏—Ç–µ –∫–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è: -{par_a}x^2 + {par_b}x + {par_c} = 0 (–≤–∞—Ä–∏–∞–Ω—Ç 19)",
            "description": "-{par_a}x^2 + {par_b}x + {par_c} = 0",
            "expression": "-{par_a}*x**2 + {par_b}*x + {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        },
        {
            "title": "–ù–∞–π–¥–∏—Ç–µ –∫–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è: {par_a}x^2 + {par_b}x + {par_c} = 0 (–≤–∞—Ä–∏–∞–Ω—Ç 20)",
            "description": "{par_a}x^2 + {par_b}x + {par_c} = 0",
            "expression": "{par_a}*x**2 + {par_b}*x + {par_c}",
            "limitVar": "-",
            "expected_value": "{expected_value}",
            "category": "algebra",
            "params": {
            "par_a": (1, 5 ),
            "par_b": (1, 10),
            "par_c": (1, 10),
            "expected_value": "0"
            }
        }
    ]
}

def substitute_placeholders(text: str, substitutions: dict) -> str:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤–∏–¥–∞ {par_...} –≤ —Å—Ç—Ä–æ–∫–µ text –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ substitutions.
    
    –§—É–Ω–∫—Ü–∏—è —Å –ø–æ–º–æ—â—å—é re.sub –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –∑–∞–º–µ–Ω—è–µ—Ç –∏—Ö –Ω–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏.
    """
    def repl(match):
        key = match.group(1)
        return str(substitutions.get(key, match.group(0)))
    return re.sub(r"\{(par_\w+)\}", repl, text)

def generate_random_task(template: dict) -> dict:
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ —à–∞–±–ª–æ–Ω—É:
      1. –ò–∑ –ø–æ–ª—è "params" –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äì –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ (tuple) –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ.
      2. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ {par_...} –≤ –ø–æ–ª—è—Ö title, description, expression, limitVar –∏ expected_value.
         –î–∞–∂–µ –≤ description –∑–∞–º–µ–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ –ª–∏—Ç–µ—Ä–∞–ª—å–Ω—ã—Ö —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫ –¥–ª—è LaTeX.
      3. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è expected_value:
         - –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "limits": –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è \(\lim_{x\to\infty} \text{expression}\).
         - –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "integral": –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞.
         - –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "algebra": —Ä–µ—à–∞–µ—Ç—Å—è —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ—Ä–Ω–∏.
         - –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "integral_volterra_2": –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∏ expected_value –æ—Å—Ç–∞—ë—Ç—Å—è –∑–∞–¥–∞–Ω–Ω—ã–º.
      4. –ü–æ–ª–µ "params" —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    """
    # –ö–æ–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª.
    task = dict(template)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ params.
    substitutions = {}
    params = task.get("params", {})
    for key, value in params.items():
        if isinstance(value, tuple) and len(value) == 2:
            substitutions[key] = random.randint(value[0], value[1])
        else:
            substitutions[key] = value

    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤–æ –≤—Å–µ—Ö —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª—è—Ö.
    for field in ["title", "description", "expression", "limitVar", "expected_value"]:
        if field in task and isinstance(task[field], str):
            task[field] = substitute_placeholders(task[field], substitutions)

    # –í—ã—á–∏—Å–ª—è–µ–º expected_value –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    category = task.get("category")
    if category == "limits":
        try:
            x = sp.symbols('x')
            expr_str = task["expression"]
            expr = sp.sympify(expr_str)
            lim_val = sp.limit(expr, x, sp.oo)
            task["expected_value"] = str(lim_val)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è expected_value –¥–ª—è limits: {e}")
    elif category == "integral":
        try:
            x = sp.symbols('x')
            expr_str = task["expression"]
            expr = sp.sympify(expr_str)
            # –ï—Å–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª, —Ç–æ –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º.
            integral_val = expr.evalf()
            task["expected_value"] = str(integral_val)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è expected_value –¥–ª—è integral: {e}")
    elif category == "algebra":
        try:
            x = sp.symbols('x')
            expr_str = task["expression"]
            expr = sp.sympify(expr_str)
            # –†–µ—à–∞–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: –∏—â–µ–º –∫–æ—Ä–Ω–∏
            solutions = sp.solve(expr, x)
            task["expected_value"] = str(solutions)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è expected_value –¥–ª—è algebra: {e}")
    elif category == "integral_volterra_2":
        # –î–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è ‚Äì –æ—Å—Ç–∞–≤–ª—è–µ–º expected_value —Ç–∞–∫–∏–º, –∫–∞–∫–æ–µ –∑–∞–¥–∞–Ω–æ.
        pass

    # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ "params"
    if "params" in task:
        task.pop("params")
    return task

@tasks_generator_bp.route("", methods=["POST"])
def generate_tasks():
    """
    API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á.
    
    –û–∂–∏–¥–∞–µ—Ç JSON –≤–∏–¥–∞:
      { "category": <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>, "count": <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á> }
      
    –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —à–∞–±–ª–æ–Ω, –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –≤ "params",
    –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è expected_value —á–µ—Ä–µ–∑ sympy –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
    """
    try:
        data = request.get_json()
        category = data.get("category")
        count = int(data.get("count", 1))
        if category not in TEMPLATES:
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"}), 400
        templates = TEMPLATES[category]
        if not templates:
            return jsonify({"error": "–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"}), 400

        generated_tasks = []
        for _ in range(count):
            random_template = random.choice(templates)
            task_generated = generate_random_task(random_template)
            generated_tasks.append(task_generated)
        return jsonify({"generated_tasks": generated_tasks}), 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á: {e}")
        return jsonify({"error": str(e)}), 500

@tasks_generator_bp.route("/confirm", methods=["POST"])
def confirm_task():
    """
    API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è) –∑–∞–¥–∞—á–∏.
    
    –û–∂–∏–¥–∞–µ—Ç JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –≤ –±–∞–∑–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏.
    """
    try:
        task_data = request.get_json()
        new_task = Task(
            title=task_data.get("title"),
            description=task_data.get("description"),
            expression=task_data.get("expression"),
            limitVar=task_data.get("limitVar"),
            expected_value=task_data.get("expected_value"),
            category=task_data.get("category"),
        )
        db.session.add(new_task)
        db.session.commit()
        return jsonify({"message": "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", "task_id": new_task.id}), 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return jsonify({"error": str(e)}), 500




==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\users.py ====
from flask import Blueprint, request, jsonify
from models import db, User
from datetime import datetime
users_bp = Blueprint('users', __name__, url_prefix='/api/users')

@users_bp.route('', methods=['GET'])
def get_users():
    users = User.query.all()
    users_list = []
    for user in users:
        user_data = {
            'id': user.id,
            'firstname': user.firstname,
            'lastname': user.lastname,
            'username': user.username,
            'email': user.email,
            'bio': user.bio,
            'role': user.role,
        }
        users_list.append(user_data)
    return jsonify(users_list), 200


==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\database\-- SQLite.sql ====
SELECT * from steps
WHERE solution_id > 160

==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\utils\Auth\auth.py ====
from flask import Blueprint, request, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
from models import db, User
import jwt
import datetime
from config import Config

auth_bp = Blueprint('auth', __name__, url_prefix='/api/auth')

@auth_bp.route('/signup', methods=['POST'])
def register():
    
    data = request.json
    required_fields = ['firstname', 'lastname', 'username', 'email', 'password']
    for field in required_fields:
        if field not in data:
            return jsonify({"message": f"{field} is required"}), 400

    if User.query.filter_by(username=data['username']).first():
        return jsonify({"message": "Username already exists"}), 400

    hashed_password = generate_password_hash(data['password'])
    new_user = User(
        firstname=data['firstname'],
        lastname=data['lastname'],
        username=data['username'],
        email=data['email'],
        password=hashed_password,
        bio=data.get('bio', ''),
        image=data.get('image', ''),
        role=data.get('role', 'student')
    )
    db.session.add(new_user)
    db.session.commit()

    return jsonify({"message": "User registered successfully"}), 201

@auth_bp.route('/login', methods=['POST'])
def login():
    data = request.json
    if 'username' not in data or 'password' not in data:
        return jsonify({"message": "Username and password are required"}), 400

    user = User.query.filter_by(username=data['username']).first()
    if user and check_password_hash(user.password, data['password']):
        token = jwt.encode({
            'user_id': user.id,
            'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=24)
        }, Config.DB_SECRET_KEY, algorithm="HS256")
        return jsonify({
            "message": "Login successful",
            "token": token,
            "user": {
                "username": user.username,
                "firstname": user.firstname,
                "lastname": user.lastname,
                "email": user.email,
                "role": user.role
            }
        }), 200
    return jsonify({"message": "Invalid credentials"}), 401



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\utils\Auth\__init__.py ====



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\utils\Model\model.py ====
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

db = SQLAlchemy()

class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    firstname = db.Column(db.String(100), nullable=False)
    lastname = db.Column(db.String(100), nullable=False)
    username = db.Column(db.String(100), unique=True, nullable=False)
    email = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    bio = db.Column(db.Text, default="")
    image = db.Column(db.String(300), default="")
    role = db.Column(db.String(50), default="student")  # –∏–ª–∏ "admin"
    chat_history = db.Column(db.Text)  # –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å JSON –∫–∞–∫ —Å—Ç—Ä–æ–∫—É

    solutions = db.relationship('Solution', backref='user', lazy=True)

class Task(db.Model):
    __tablename__ = 'tasks'
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text)
    expression = db.Column(db.String(500), nullable=False)  # –∏—Å—Ö–æ–¥–Ω–æ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    limitVar = db.Column(db.String(50), nullable=False)      # –Ω–∞–ø—Ä–∏–º–µ—Ä "x->‚àû"
    expected_value = db.Column(db.String(100), nullable=False)

    solutions = db.relationship('Solution', backref='task', lazy=True)

class Solution(db.Model):
    __tablename__ = 'solutions'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    task_id = db.Column(db.Integer, db.ForeignKey('tasks.id'), nullable=False)
    status = db.Column(db.String(50), default="in_progress")  # in_progress, completed, error
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    steps = db.relationship('Step', backref='solution', lazy=True)

class Step(db.Model):
    __tablename__ = 'steps'
    id = db.Column(db.Integer, primary_key=True)
    solution_id = db.Column(db.Integer, db.ForeignKey('solutions.id'), nullable=False)
    step_number = db.Column(db.Integer, nullable=False)
    input_expr = db.Column(db.String(500), nullable=False)
    is_correct = db.Column(db.Boolean, default=True)
    error_type = db.Column(db.String(100))
    hint = db.Column(db.String(300))



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\utils\Model\__init__.py ====



